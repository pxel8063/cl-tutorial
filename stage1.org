#+PROPERTY: header-args:lisp :results replace

* tutorial
* setup
* sly setup
 set org-babel-lisp-eval-fn to 'sly-eval

* Make the nix-shell environment
First, take a look at how to create shell environments with shell.nix.
** A basic =shell.nix= file for the lisp(sbcl) environment
Create a =shell.nix= file in the fresh directory.

#+name: basic-shell.nix
#+header: :tangle no
#+caption: A basic shell.nix file
#+begin_src sh
  let
    nixpkgs = fetchTarball "https://github.com/NixOS/nixpkgs/tarball/nixos-24.05";
    pkgs = import nixpkgs { config = {}; overlays = []; };
    sbcl' = pkgs.sbcl.withPackages ( ps: with ps; [ ]);
  in
  pkgs.mkShellNoCC {
    packages = [ sbcl' ];
  }
#+end_src

Enter the environment by running =nix-shell= in this project directory.
nix-shell looks first for =shell.nix= in the current directory.
#+begin_src sh
  nix-shell
#+end_src

Now you are able to invoke sbcl in the project directory. Since there is no
dependency in the environment.  You can't do almost nothing in there for now.
Dependencies will be added in the later section of this article.

** Automatic activation of the shell enviroment
You hove to invoke =nix-shell= everytime you change to this directory. This is
very cumbersome. By using =direnv=, you can automate this.

Prepare =.envrc=. with a following content.
#+name: prepare .envrc
#+header: :tangle .envrc
#+caption: .envrc
#+begin_src sh
  use nix
#+end_src

Activate direnv by issuing following command.
#+begin_src sh
  direnv allow
#+end_src

Now, every time you change directory to the project directory, the shell environment becomes
automatically available.

* Packaging a minimal code
Now that you have the lisp development environment, let's build a web server as
an example.
** Define cl-tutorial system and preper a server source code
Make =cl-tutorial.asd= as following.  Notice that the first part of the file
name is =cl-tutorial=, which is same as the package name called "cl-tutorial",
and a file name extension must be =.asd=, not =.asdf=.

As an web server library, =hunghentoot= is used.

#+name: initial-cl-tutorial.asd
#+header: :tangle no
#+begin_src lisp
  (defsystem "cl-tutorial"
    :version "0.0.1"
    :author "antarcticafalls"
    :license "MIT"
    :description "a minimal web server as a tutorial"
    :depends-on (:hunchentoot)
    :components ((:module "./."
  		:components
  		((:file "main")))))
#+end_src

A fake server code.  you are going to revise later as needed.
#+name: main.lisp
#+header: :tangle no
#+caption: main.lisp
#+begin_src lisp
  (in-package :cl-user)
  (defpackage :cl-tutorial
    (:use :cl :hunchentoot)
    (:export
     :main))
  (in-package :cl-tutorial)

  (defun main ()
    (loop))
#+end_src

** Load =cl-tutorial= system
Invoke =sbcl= in the environment and type following to load =cl-tutorial=.
#+name: sbcl-setup
#+begin_src lisp
  (load (sb-ext:posix-getenv "ASDF"))
  (pushnew (truename "./.") asdf:*central-registry*)
  (asdf:load-system "cl-tutorial")
#+end_src

#+RESULTS
#+begin_src sh
 Component :HUNCHENTOOT not found, required by
 #<SYSTEM "cl-tutorial">
   [Condition of type ASDF/FIND-COMPONENT:MISSING-DEPENDENCY]

Restarts:
 0: [RETRY] Retry loading HUNCHENTOOT.
 1: [RETRY] Retry ASDF operation.
 2: [CLEAR-CONFIGURATION-AND-RETRY] Retry ASDF operation after resetting the configuration.
 3: [RETRY] Retry SLY evaluation request.
 4: [*ABORT] Return to SLY's top level.
 5: [ABORT] abort thread (#<THREAD tid=1587638 "slynk-worker" RUNNING {100B0E5383}>)

Backtrace:
 0: (ASDF/FIND-COMPONENT:RESOLVE-DEPENDENCY-NAME #<ASDF/SYSTEM:SYSTEM "cl-tutorial"> :HUNCHENTOOT NIL)
 1: (ASDF/PLAN:MAP-DIRECT-DEPENDENCIES #<ASDF/LISP-ACTION:PREPARE-OP > #<ASDF/SYSTEM:SYSTEM "cl-tutorial"> #<FUNCTION (LAMBDA (ASDF/PLAN::O ASDF/PLAN::C) :IN ASDF/PLAN:TRAVERSE-ACTION) {100B11F35B}>)
 2: ((LAMBDA NIL :IN ASDF/PLAN:TRAVERSE-ACTION))
 3: ((LAMBDA NIL :IN ASDF/ACTION:CALL-WHILE-VISITING-ACTION))
 4: (ASDF/PLAN:TRAVERSE-ACTION #<ASDF/PLAN:SEQUENTIAL-PLAN {100B109D23}> #<ASDF/LISP-ACTION:PREPARE-OP > #<ASDF/SYSTEM:SYSTEM "cl-tutorial"> T)
 5: (ASDF/PLAN:MAP-DIRECT-DEPENDENCIES #<ASDF/LISP-ACTION:PREPARE-OP > #<ASDF/COMPONENT:MODULE "cl-tutorial" "./."> #<FUNCTION (LAMBDA (ASDF/PLAN::O ASDF/PLAN::C) :IN ASDF/PLAN:TRAVERSE-ACTION) {100B11F21..
 --more--
#+end_src
Load fails because you don't have =hunchgentoot= in the shell environment.

** Add a =hunchentoot= dependency in the shell environment

In order to make =hunchentoot= available in the nix shell environment, you need
adjust =shell.nix=.
#+name: shell.nix-revised
#+caption: shell.nix revised
#+header: :tangle shell.nix
#+begin_src sh
  let
    nixpkgs = fetchTarball "https://github.com/NixOS/nixpkgs/tarball/nixos-24.05";
    pkgs = import nixpkgs { config = {}; overlays = []; };
    sbcl' = pkgs.sbcl.withPackages (ps: with ps; [ hunchentoot ]);
  in
    pkgs.mkShellNoCC {
      packages = [ sbcl' ];
  }
#+end_src

After reloading an environment by =direnv reload=,
again you type following on sbcl repl.
#+name: sbcl-setup
#+caption: Load cl-tutorial system
#+begin_src lisp
  (load (sb-ext:posix-getenv "ASDF"))
  (pushnew (truename "./.") asdf:*central-registry*)
  (asdf:load-system "cl-tutorial")
#+end_src

This should bring you to the =cl-tutorial= system. Try
#+begin_src lisp
  (in-package :cl-tutorial)
#+end_src
** Implement a server code

#+name: main.lisp
#+caption: main.lisp revised
#+header: :tangle main.lisp
#+begin_src lisp
  (in-package :cl-user)
  (defpackage :cl-tutorial
    (:use :cl)
    (:export
     :main))
  (in-package :cl-tutorial)

  (hunchentoot:define-easy-handler (root-route :uri "/") (name)
    (format nil "Hey~@[ ~A~]!" name))
  (defvar *server* (make-instance 'hunchentoot:easy-acceptor :port 6789))

  (defun main ()
    (hunchentoot:start *server*)
    (loop))
#+end_src
